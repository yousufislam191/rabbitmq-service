/**
 * Startup Logger Utility
 * Handles all startup logging messages for better organization and maintainability
 */

class StartupLogger {
    /**
     * Display application startup banner
     */
    static displayBanner() {
        console.log("üöÄ Starting application...");
    }

    /**
     * Display database initialization message
     */
    static displayDatabaseInit() {
        console.log("üîÑ Starting message consumers...");
    }

    /**
     * Display consumers startup message
     */
    static displayConsumersInit() {
        console.log("üîÑ Starting message consumers...");
    }

    /**
     * Display schedulers initialization message
     */
    static displaySchedulersInit() {
        console.log("‚è∞ Starting schedulers...");
    }

    /**
     * Display complete API endpoints documentation
     * @param {number} port - The port number the server is running on
     */
    static displayAPIEndpoints(port) {
        console.log(`üåê Server running on http://localhost:${port}`);
        console.log("");

        // Health endpoints
        this.displayHealthEndpoints(port);
        console.log("");

        // Database endpoints
        this.displayDatabaseEndpoints(port);
        console.log("");

        // Migration endpoints
        this.displayMigrationEndpoints(port);
        console.log("");

        // Queue endpoints
        this.displayQueueEndpoints(port);
        console.log("");

        // Data seeding endpoints
        this.displaySeedingEndpoints(port);
        console.log("");

        console.log("‚úÖ Application started successfully!");
        console.log("üìñ For detailed API documentation, visit: http://localhost:" + port + "/seed/docs");
    }

    /**
     * Display health check endpoints
     * @param {number} port - The port number
     */
    static displayHealthEndpoints(port) {
        console.log(`üìä Health endpoints:`);
        console.log(`   ‚Ä¢ General health: http://localhost:${port}/health`);
        console.log(`   ‚Ä¢ Liveness probe: http://localhost:${port}/health/live`);
        console.log(`   ‚Ä¢ Readiness probe: http://localhost:${port}/health/ready`);
    }

    /**
     * Display database endpoints
     * @param {number} port - The port number
     */
    static displayDatabaseEndpoints(port) {
        console.log(`üóÉÔ∏è  Database endpoints:`);
        console.log(`   ‚Ä¢ DB health: http://localhost:${port}/db/health`);
        console.log(`   ‚Ä¢ DB status: http://localhost:${port}/db/status`);
        console.log(`   ‚Ä¢ DB info: http://localhost:${port}/db/info`);
        console.log(`   ‚Ä¢ DB ping: http://localhost:${port}/db/ping`);
    }

    /**
     * Display migration endpoints
     * @param {number} port - The port number
     */
    static displayMigrationEndpoints(port) {
        console.log(`üöÄ Migration endpoints:`);
        console.log(`   ‚Ä¢ Start migration: POST http://localhost:${port}/migrate`);
        console.log(`   ‚Ä¢ Get migrations: GET http://localhost:${port}/migrate`);
        console.log(`   ‚Ä¢ Migration status: GET http://localhost:${port}/migrate/status/:id`);
        console.log(`   ‚Ä¢ Cancel migration: DELETE http://localhost:${port}/migrate/cancel/:id`);
        console.log(`   ‚Ä¢ Batch status: GET http://localhost:${port}/migrate/batch/:id`);
        console.log(`   ‚Ä¢ Job history: GET http://localhost:${port}/migrate/jobs`);
    }

    /**
     * Display queue management endpoints
     * @param {number} port - The port number
     */
    static displayQueueEndpoints(port) {
        console.log(`üîÑ Queue endpoints:`);
        console.log(`   ‚Ä¢ Queue stats: GET http://localhost:${port}/queue/stats`);
        console.log(`   ‚Ä¢ Queue health: GET http://localhost:${port}/queue/health`);
        console.log(`   ‚Ä¢ Consumer status: GET http://localhost:${port}/queue/consumers/status`);
        console.log(`   ‚Ä¢ Start consumers: POST http://localhost:${port}/queue/consumers/start`);
        console.log(`   ‚Ä¢ Stop consumers: POST http://localhost:${port}/queue/consumers/stop`);
        console.log(`   ‚Ä¢ Restart consumers: POST http://localhost:${port}/queue/consumers/restart`);
        console.log(`   ‚Ä¢ Purge queue: DELETE http://localhost:${port}/queue/purge/:queueName`);
        console.log(`   ‚Ä¢ Retry DLQ: POST http://localhost:${port}/queue/retry-dlq`);
        console.log(`   ‚Ä¢ Test publish: POST http://localhost:${port}/queue/test/publish`);
    }

    /**
     * Display data seeding endpoints
     * @param {number} port - The port number
     */
    static displaySeedingEndpoints(port) {
        console.log(`üå± Data Seeding endpoints:`);
        console.log(`   ‚Ä¢ Seed docs: GET http://localhost:${port}/seed/docs`);
        console.log(`   ‚Ä¢ Collection stats: GET http://localhost:${port}/seed/stats`);
        console.log(`   ‚Ä¢ Seed SomeModel: POST http://localhost:${port}/seed/some-model`);
        console.log(`   ‚Ä¢ Seed JobStatus: POST http://localhost:${port}/seed/job-status`);
        console.log(`   ‚Ä¢ Seed all data: POST http://localhost:${port}/seed/all`);
        console.log(`   ‚Ä¢ Clear data: DELETE http://localhost:${port}/seed/clear`);
    }

    /**
     * Display error message for application startup failure
     * @param {Error} error - The error that occurred
     */
    static displayStartupError(error) {
        console.error("‚ùå Failed to start application:", error.message);
        console.error("üí° Troubleshooting tips:");
        console.error("   ‚Ä¢ Check if MongoDB is running on the configured port");
        console.error("   ‚Ä¢ Verify RabbitMQ server is accessible");
        console.error("   ‚Ä¢ Ensure all environment variables are set correctly");
        console.error("   ‚Ä¢ Check if the specified port is available");
    }

    /**
     * Display uncaught exception error
     * @param {Error} error - The uncaught exception
     */
    static displayUncaughtException(error) {
        console.error("üí• Uncaught Exception:", error);
        console.error("üîß The application will exit. Please check your code for unhandled errors.");
    }

    /**
     * Display unhandled promise rejection error
     * @param {any} reason - The rejection reason
     * @param {Promise} promise - The promise that was rejected
     */
    static displayUnhandledRejection(reason, promise) {
        console.error("üí• Unhandled Rejection at:", promise, "reason:", reason);
        console.error("üîß The application will exit. Please ensure all promises are properly handled.");
    }

    /**
     * Display compact startup summary (cleaner output)
     * @param {number} port - The port number
     */
    static displayCompactSummary(port) {
        console.log(`üåê Server running on http://localhost:${port}`);
        console.log(`ÔøΩ Documentation: http://localhost:${port}/seed/docs`);
        console.log("‚úÖ Application ready!");
    }
}

module.exports = StartupLogger;
